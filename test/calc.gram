file: statements ENDMARKER { Module(statements.args) }

statements: s=statement+ { Block(s) }

statement:
    | compound_stmt
    | simple_stmts

compound_stmt:
    | if_stmt
    | while_stmt
    | function_def

simple_stmts: simple_stmt NEWLINE NL* { simple_stmt }

simple_stmt:
    | declaration
    | return_stmt
    | assignment

if_stmt:
    | 'if' test=expr ':' body=block 'else' ':' orelse=block { If(test, body, orelse) }
    | 'if' test=expr ':' body=block { If(test, body) }

while_stmt: 'while' test=expr ':' body=block { While(test, body) }

function_def: 'fn' NAME '(' ')' '->' 'Int' ':' block { FunctionDef(name.text, block.args) }

block:
    | NEWLINE INDENT statements DEDENT { statements }
    | simple_stmts

assignment:
    | NAME '=' assignment { Assign(name, assignment) }
    | expr

declaration: 'var' NAME '=' expr { Declare(name, expr) }

return_stmt: 'return' expr { Return(expr) }

expr: equality

equality:
    | equality '==' relational { Compare(equality, '==', relational) }
    | equality '!=' relational { Compare(equality, '!=', relational) }
    | relational

relational:
    | relational '<' add { Compare(relational, '<', add) }
    | relational '<=' add { Compare(relational, '<=', add) }
    | relational '>' add { Compare(relational, '>', add) }
    | relational '>=' add { Compare(relational, '>=', add) }
    | add

add:
    | add '+' term { BinOp(add, '+', term) }
    | add '-' term { BinOp(add, '-', term) }
    | term

term:
    | term '*' unary { BinOp(term, '*', unary) }
    | term '/' unary { BinOp(term, '/', unary) }
    | unary

unary:
    | '+' unary { UnaryOp('+', unary) }
    | '-' unary { UnaryOp('-', unary) }
    | atom

atom:
    | NAME
    | NUMBER
    | '(' expr ')' { expr }

