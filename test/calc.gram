program: statements ENDMARKER { statements }

statements:
    | statement statements { Block(List(statement) + statements.args) }
    | statement { Block(List(statement)) }

statement:
    | 'return' expr NEWLINE { Return(expr) }
    | expr NEWLINE { expr }

expr: assign

assign:
    | NAME '=' assign { Assign(name, assign) }
    | equality

equality:
    | equality '==' relational { Compare(equality, '==', relational) }
    | equality '!=' relational { Compare(equality, '!=', relational) }
    | relational

relational:
    | relational '<' add { Compare(relational, '<', add) }
    | relational '<=' add { Compare(relational, '<=', add) }
    | relational '>' add { Compare(relational, '>', add) }
    | relational '>=' add { Compare(relational, '>=', add) }
    | add

add:
    | add '+' term { BinOp(add, '+', term) }
    | add '-' term { BinOp(add, '-', term) }
    | term

term:
    | term '*' unary { BinOp(term, '*', unary) }
    | term '/' unary { BinOp(term, '/', unary) }
    | unary

unary:
    | '+' unary { UnaryOp('+', unary) }
    | '-' unary { UnaryOp('-', unary) }
    | atom

atom:
    | NAME
    | NUMBER
    | '(' expr ')' { expr }

